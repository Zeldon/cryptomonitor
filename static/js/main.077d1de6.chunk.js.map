{"version":3,"sources":["state/index.ts","pages/Home/index.tsx","components/admin/authProvider.ts","components/admin/simplechipfield.tsx","components/admin/cryptoentities/index.tsx","components/admin/loginPage.tsx","pages/App.tsx","index.tsx"],"names":["authProvider","dataProvider","history","reducer","combineReducers","admin","adminReducer","router","connectRouter","saga","rootSaga","all","adminSaga","map","fork","sagaMiddleware","createSagaMiddleware","composeEnhancers","compose","store","createStore","state","action","type","USER_LOGOUT","undefined","applyMiddleware","routerMiddleware","run","Home","to","login","username","localStorage","setItem","Promise","resolve","logout","removeItem","checkError","status","reject","checkAuth","getItem","getPermissions","useStyles","makeStyles","main","display","flexWrap","marginTop","marginBottom","chip","margin","SimpleChipField","record","classes","className","Chip","label","defaultProps","addLabel","entitytypeChoices","id","name","ecosystemChoices","categoryChoices","CryptoEEdit","props","Edit","SimpleForm","TextInput","source","AutocompleteInput","choices","ArrayInput","SimpleFormIterator","DateTimeInput","disable","CryptoECreate","Create","CryptoEntitiesList","List","Datagrid","EditButton","TextField","ArrayField","SingleFieldList","ChipField","DateField","LoginPage","Login","backgroundImage","lb4Provider","createHashHistory","App","exact","path","Admin","loginPage","title","Resource","list","CryptoEntities","create","edit","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.077d1de6.chunk.js","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport { routerMiddleware, connectRouter } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport { all, fork } from 'redux-saga/effects';\nimport { adminReducer, adminSaga, USER_LOGOUT} from 'react-admin';\n\nexport default ({\n    authProvider,\n    dataProvider,\n    history,\n}) => {\n    const reducer = combineReducers({\n        admin: adminReducer,\n        router: connectRouter(history),\n        // add your own reducers here\n    });\n    const resettableAppReducer = (state, action) =>\n        reducer(action.type !== USER_LOGOUT ? state : undefined, action);\n\n    const saga = function* rootSaga() {\n        yield all(\n            [\n                adminSaga(dataProvider, authProvider),\n                // add your own sagas here\n            ].map(fork)\n        );\n    };\n    const sagaMiddleware = createSagaMiddleware();\n\n    const composeEnhancers =\n        (process.env.NODE_ENV === 'development' &&\n            typeof window !== 'undefined' &&\n            window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n            window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n                trace: true,\n                traceLimit: 25,\n            })) ||\n        compose;\n  \n    const store = createStore(\n        resettableAppReducer,\n        { /* set your initial state here */ },\n        composeEnhancers(\n            applyMiddleware(\n                sagaMiddleware,\n                routerMiddleware(history),\n                // add your own middlewares here\n            ),\n            // add your own enhancers here\n        ),        \n    );\n    sagaMiddleware.run(saga);\n    return store;\n};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Home: React.FC = () => {\n    return (\n        <div>\n            <div>Hi Frensssss~~~</div>\n            <NavLink to=\"/admin\">Go to Admin Page</NavLink>\n        </div>\n    )\n}\n\nexport default Home\n","export default {\n    // called when the user attempts to log in\n    login: ({ username }) => {\n        localStorage.setItem('username', username);\n        // accept all username/password combinations\n        return Promise.resolve();\n    },\n    // called when the user clicks on the logout button\n    logout: () => {\n        localStorage.removeItem('username');\n        return Promise.resolve();\n    },\n    // called when the API returns an error\n    checkError: ({ status }) => {\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('username');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n    // called when the user navigates to a new location, to check for authentication\n    checkAuth: () => {\n        return localStorage.getItem('username')\n            ? Promise.resolve()\n            : Promise.reject();\n    },\n    // called when the user navigates to a new location, to check for permissions / roles\n    getPermissions: () => Promise.resolve(),\n};","import React from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    main: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        marginTop: -8,\n        marginBottom: -8,\n    },\n    chip: { margin: 4 },\n});\n\nconst SimpleChipField = ({ record }) => {\n    const classes = useStyles();\n\n    return record ? (\n        <span className={classes.main}>\n            <Chip\n                key={record}\n                className={classes.chip}\n                label={record}\n            />\n        </span>\n    ) : null;\n};\n\nSimpleChipField.defaultProps = {\n    addLabel: true,\n};\n\nexport default SimpleChipField;","import React from \"react\";\nimport {List, Datagrid, \n    NumberField, TextField, DateField, \n    ArrayField, SingleFieldList, ChipField,\n    Create, Edit, SimpleForm, EditButton,\n    TextInput, NumberInput, SelectInput, AutocompleteInput,\n    ArrayInput, AutocompleteArrayInput, SimpleFormIterator,\n    DateTimeInput,\n    Filter, SearchInput } from 'react-admin';\nimport SimpleChipField from \"../simplechipfield\";\n// const CustomerFilter = (props) => (\n// <Filter {...props}>\n//     <SearchInput placeholder='Customer Email' \n//                     source='email' resettable alwaysOn />\n// </Filter>\n\n// )\n\nconst entitytypeChoices = [\n    {id:\"Project\", name:\"Project\"}, \n    {id:\"Person\", name: \"Person\"}\n]\n\nconst ecosystemChoices = [\n    {id: \"BTC\", name: \"BTC\"},\n    {id: \"ETH\", name: \"ETH\"},\n    {id: \"ADA\", name: \"ADA\"},\n    {id: \"BNB\", name: \"BNB\"},\n    {id: \"DOT\", name: \"DOT\"},\n    {id: \"SOL\", name: \"SOL\"},\n    {id: \"FTM\", name: \"FTM\"},\n    {id: \"AVAX\", name: \"AVAX\"},\n]\n\nconst categoryChoices = [\n    {id: \"Layer1\", name: \"Layer1\"},\n    {id: \"Layer2\", name: \"Layer2\"},\n    {id: \"DEX\", name: \"DEX\"},\n    {id: \"CEX\", name: \"CEX\"},\n    {id: \"Aggregator\", name: \"Aggregator\"},\n    {id: \"DeFi\", name: \"DeFi\"},\n    {id: \"Middleware\", name: \"Middleware\"},\n    {id: \"Privacy\", name: \"Privacy\"},\n    {id: \"NFT\", name: \"NFT\"},\n    {id: \"Gaming\", name: \"Gaming\"},\n    {id: \"Innovation\", name: \"Innovation\"},\n    {id: \"Hype\", name: \"Hype\"},\n]\n\nfunction CryptoEntitiesList(props){\n    return (\n        <List { ...props } \n            //filters={<CustomerFilter/>}\n            >\n            <Datagrid>\n                <EditButton/>\n                <TextField source=\"name\"/>\n                <TextField source=\"symbol\"/>\n                <TextField source=\"entitytype\"/>\n                <TextField source=\"ecosystem\" />\n                \n                <ArrayField source=\"category\">\n                    <SingleFieldList>\n                        {/* <ChipField source=\"0\"/> */}\n                        <SimpleChipField record=\"\"/>\n                    </SingleFieldList>\n                </ArrayField>\n\n                <ArrayField source=\"affiliatedto\">\n                    <SingleFieldList>\n                        {/* <ChipField source=\"0\"/> */}\n                        <SimpleChipField record=\"\"/>\n                    </SingleFieldList>\n                </ArrayField>\n\n                <TextField source=\"webpage\" />\n                <TextField source=\"twitter\" />\n                <TextField source=\"discord\" />\n                <TextField source=\"telegram\" />\n                <TextField source=\"medium\" />\n                <TextField source=\"repo\" />\n                <TextField source=\"hiring\" />\n                \n                <TextField source=\"logolink\" />\n\n                <ArrayField source=\"otherlinks\">\n                    <SingleFieldList>\n                        <ChipField />\n                    </SingleFieldList>\n                </ArrayField>\n\n                <TextField source=\"value\" />\n                <DateField source=\"datetime\"/>\n            </Datagrid>\n        </List>\n    );\n};\n\nexport const CryptoEEdit: React.FC = (props) => {\n    return (\n        <Edit {...props}>\n            <SimpleForm>\n                <TextInput source=\"name\"/>\n                <TextInput source=\"symbol\"/>\n                <AutocompleteInput source=\"entitytype\" \n                    choices={entitytypeChoices}\n                />\n                <AutocompleteInput source=\"ecosystem\" \n                    choices={ecosystemChoices}\n                />\n\n                <ArrayInput source=\"category\">\n                    <SimpleFormIterator>\n                    <AutocompleteInput source=\"\"\n                            choices={categoryChoices}\n                        />\n                    </SimpleFormIterator>\n                </ArrayInput>\n\n                <ArrayInput source=\"affiliatedto\">\n                    <SimpleFormIterator>\n                        <AutocompleteInput source=\"\"\n                            choices={ecosystemChoices}\n                        />\n                    </SimpleFormIterator>\n                </ArrayInput>\n\n                <TextInput source=\"twitter\" />\n                <TextInput source=\"discord\" />\n                <TextInput source=\"telegram\" />\n                <TextInput source=\"medium\" />\n                <TextInput source=\"repo\" />\n                <TextInput source=\"hiring\" />\n                <TextInput source=\"webpage\" />\n                <TextInput source=\"logolink\" />\n\n                <ArrayInput source=\"otherlinks\">\n                    <SimpleFormIterator>\n                        <TextInput source=\"\"/>\n                    </SimpleFormIterator>\n                </ArrayInput>\n\n                <TextInput source=\"value\" />\n                <DateTimeInput disable source=\"datetime\" />\n            </SimpleForm>\n        </Edit>\n    )\n};\n\nexport const CryptoECreate: React.FC = (props) => {\n    return (\n        <Create {...props}>\n            <SimpleForm>\n                <TextInput source=\"name\"/>\n                <TextInput source=\"symbol\"/>\n                <AutocompleteInput source=\"entitytype\" \n                    choices={entitytypeChoices}\n                />\n                <AutocompleteInput source=\"ecosystem\" \n                    choices={ecosystemChoices}\n                />\n\n                <ArrayInput source=\"category\">\n                    <SimpleFormIterator>\n                    <AutocompleteInput source=\"\"\n                            choices={categoryChoices}\n                        />\n                    </SimpleFormIterator>\n                </ArrayInput>\n\n                <ArrayInput source=\"affiliatedto\">\n                    <SimpleFormIterator>\n                        <AutocompleteInput source=\"\"\n                            choices={ecosystemChoices}\n                        />\n                    </SimpleFormIterator>\n                </ArrayInput>\n\n                <TextInput source=\"twitter\" />\n                <TextInput source=\"discord\" />\n                <TextInput source=\"telegram\" />\n                <TextInput source=\"medium\" />\n                <TextInput source=\"repo\" />\n                <TextInput source=\"hiring\" />\n                <TextInput source=\"webpage\" />\n                <TextInput source=\"logolink\" />\n\n                <ArrayInput source=\"otherlinks\">\n                    <SimpleFormIterator>\n                        <TextInput source=\"\"/>\n                    </SimpleFormIterator>\n                </ArrayInput>\n\n                <TextInput source=\"value\" />\n                <DateTimeInput disable source=\"datetime\" />\n            </SimpleForm>\n        </Create>\n    )\n};\n\nexport default CryptoEntitiesList;","import React from 'react';\nimport { Login } from 'react-admin';\n\nconst LoginPage = props => {\n    return <Login {...props} backgroundImage=\"https://source.unsplash.com/random/1600x900/?crypto\" />\n};\n\nexport default LoginPage;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createHashHistory } from 'history';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport {Admin, Resource} from 'react-admin';\n\nimport lb4Provider from 'react-admin-lb4';\n\nimport createStore from '../state';\n\n\nimport Home from '../pages/Home';\nimport authProvider from '../components/admin/authProvider';\nimport CryptoEntities, {CryptoECreate, CryptoEEdit} from '../components/admin/cryptoentities';\nimport LoginPage from '../components/admin/loginPage';\n\n// providers\nconst dataProvider = lb4Provider('https://freemongoatlas.herokuapp.com/')\n\n\nconst history = createHashHistory();\n\nfunction App() {\n  return (\n    <Provider store={createStore({\n        authProvider,\n        dataProvider,\n        history,\n      })}>\n\n        <Router>\n          <Switch>\n\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n\n            <Route path=\"/admin\">\n              <Admin \n                loginPage={LoginPage} \n\n                authProvider={authProvider} \n                dataProvider={dataProvider} \n                history={history}\n                title=\"Crypto Tracker Admin\"\n                >\n\n                <Resource name='crypto-entities' \n                  list={CryptoEntities}\n                  create={CryptoECreate}\n                  edit = {CryptoEEdit}\n                  />\n              </Admin>\n            </Route>\n\n          </Switch>\n        </Router>\n\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}